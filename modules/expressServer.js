const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const WebSocket = require("ws");
const bot = require('./telegramBot.js'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
const fs = require('fs');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv
require('dotenv').config();

const address = process.env.ADDRESS;
const companyName = process.env.COMPANY_NAME;
const supportAccount = process.env.SUPPORT_ACCOUNT;
const addressInfo = process.env.ADDRESS_INFO;
const jobTime = process.env.JOB_TIME;
const jobTimeInfo = process.env.JOB_TIME_INFO;
const reception = process.env.RECEPTION;
const receptionInfo = process.env.RECEPTION_INFO;

const app = express();
const PORT = 3000;

// –£–∫–∞–∑—ã–≤–∞–µ–º Express –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EJS
app.set('view engine', 'ejs');

// –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
app.set('views', path.join(__dirname, '../public'));

// –ò—Å–ø–æ–ª—å–∑—É–µ–º body-parser –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(bodyParser.json());

// –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
const CHAT_ID = process.env.ORDERS_CHAT; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
function generatePassNumber() {
    return Math.floor(1000 + Math.random() * 9000); // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999
}

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É users.json
const usersFilePath = path.resolve(__dirname, '../base/users.json');

// –ß—Ç–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getUsers() {
    if (fs.existsSync(usersFilePath)) {
        return JSON.parse(fs.readFileSync(usersFilePath, 'utf-8'));
    }
    return {};
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveUsers(users) {
    fs.writeFileSync(usersFilePath, JSON.stringify(users, null, 2), 'utf-8');
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–¥–∞—á—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const publicPath = path.join(__dirname, '../public');
app.use(express.static(publicPath));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–æ—Ä–Ω—è (–≤—ã–¥–∞—á–∞ index.html)
app.get('/', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('index', { address, companyName, supportAccount }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è history
app.get('/history', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('history', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è buy
app.get('/buy', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('buy', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è sell
app.get('/sell', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('sell', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è terms
app.get('/terms', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('terms', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è address
app.get('/address', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('address', { address, companyName, addressInfo, jobTime, jobTimeInfo, reception, receptionInfo }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è aml-policy
app.get('/aml-policy', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('aml-policy', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è privacy-policy
app.get('/privacy-policy', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('privacy-policy', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è risk
app.get('/risk', (req, res) => {
    const address = process.env.ADDRESS;
    const companyName = process.env.COMPANY_NAME;
    res.render('risk', { address, companyName }); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
});

// Middleware –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const basicAuth = (req, res, next) => {
    const auth = req.headers['authorization'];

    if (!auth) {
        // –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        res.setHeader('WWW-Authenticate', 'Basic realm="Admin Area"');
        return res.status(401).send('Authorization required');
    }

    // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Base64 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å)
    const [login, password] = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—è
    if (login === process.env.ADMIN_LOGIN && password === process.env.ADMIN_PASSWORD) {
        return next();
    }

    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    res.setHeader('WWW-Authenticate', 'Basic realm="Admin Area"');
    return res.status(401).send('Invalid credentials');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–æ—Ä–Ω—è (–≤—ã–¥–∞—á–∞ index.html)
app.get('/admin/referral', basicAuth, (req, res) => {
    res.sendFile(path.join(publicPath, 'admin.html'));
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', (req, res) => {
    try {
        const users = getUsers();
        res.json({
            success: true,
            users,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
        });
    }
});

// –ü—É—Ç—å –∫ orders.json
const ordersFilePath = path.join(__dirname, '../base/orders.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏
function saveOrderToFile(order) {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã
    fs.readFile(ordersFilePath, 'utf8', (err, data) => {
        let orders = [];
        if (!err && data) {
            try {
                orders = JSON.parse(data);
            } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        orders.push(order);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        fs.writeFile(ordersFilePath, JSON.stringify(orders, null, 4), (writeErr) => {
            if (writeErr) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:', writeErr);
            } else {
                console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª.');
            }
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ /buy
app.post('/api/buy', (req, res) => {
    const { amount, network, walletAddress, firstName, lastName, middleName, userId, course } = req.body;

    if (!amount || !network || !walletAddress || !firstName || !lastName) {
        return res.status(400).send({ error: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = getUsers();

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = users[userId];

    if (user) {
        // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let bonus = user.bonus;

        // –£–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if (bonus !== 0) {
            if (Number.isInteger(bonus)) {
                user.bonus = bonus - 1; // –ï—Å–ª–∏ –±–æ–Ω—É—Å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
            } else {
                user.bonus = (bonus - 0.1).toFixed(1); // –ï—Å–ª–∏ –±–æ–Ω—É—Å –Ω–µ—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 0.1
            }
            saveUsers(users); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
    } else {
        console.error("User not found!");
    }

    const passNumber = generatePassNumber();
    const message = `
üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${lastName} ${firstName} ${middleName || ''}
üíµ –°—É–º–º–∞: ${amount} USDT
üåê –°–µ—Ç—å: ${network}
üì• –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}

–ö—É—Ä—Å: ${course}

Telegram: [${firstName}](tg://user?id=${userId})

‚è≥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ!
    `;

    bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" })
        .then(() => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª
            saveOrderToFile({
                userId,
                timestamp: new Date().toISOString(),
                orderType: 'buy',
                amount: parseFloat(amount),
            });

            res.status(200).send({
                message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!',
                passNumber: passNumber,
            });
        })
        .catch((err) => {
            console.error(err);
            res.status(500).send({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.',
                passNumber: passNumber,
            });
        });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ /sell
app.post('/api/sell', (req, res) => {
    const { network, firstName, lastName, middleName, userId } = req.body;

    if (!network || !firstName || !lastName) {
        return res.status(400).send({ error: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.' });
    }

    const passNumber = generatePassNumber();
    const message = `
üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT

üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${lastName} ${firstName} ${middleName || ''}
üåê –°–µ—Ç—å: ${network}

Telegram: [${firstName}](tg://user?id=${userId})

‚è≥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ!
  `;

    bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" })
        .then(() => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª
            saveOrderToFile({
                userId,
                timestamp: new Date().toISOString(),
                orderType: 'sell',
                amount: null, // –£–∫–∞–∑—ã–≤–∞–µ–º null, –µ—Å–ª–∏ –ø–æ–ª–µ amount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            });

            res.status(200).send({
                message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!',
                passNumber: passNumber,
            });
        })
        .catch((err) => {
            console.error(err);
            res.status(500).send({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.',
                passNumber: passNumber,
            });
        });
});

app.get('/api/orders/:userId', (req, res) => {
    const { userId } = req.params;

    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    const ordersFilePath = path.join(__dirname, '../base/orders.json');

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ orders.json
    fs.readFile(ordersFilePath, 'utf8', (err, data) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
            return res.status(500).send({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã.' });
        }

        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ JSON
            const orders = JSON.parse(data);

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ userId
            const userOrders = orders.filter(order => order.userId === parseInt(userId, 10));

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return res.status(200).send(userOrders);
        } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
            return res.status(500).send({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.' });
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = app;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
if (require.main === module) {
    app.listen(PORT, () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    });
}
